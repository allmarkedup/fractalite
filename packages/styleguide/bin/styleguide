#!/usr/bin/env node --no-warnings

const { relative, resolve, dirname } = require('path');
const mri = require('mri');
const { cyan, dim, red } = require('kleur');
const { Signale } = require('signale');
const { stripIndent } = require('common-tags');
const { fromConfigFile } = require('@fractalite/core');
const { watch } = require('chokidar');
const ip = require('ip');
const styleguide = require('../.');
const { assign } = Object;

const logger = new Signale({
  types: {
    debug: {
      badge: 'âœŽ',
      color: 'gray'
    }
  }
});

const cwd = process.cwd();
const args = mri(process.argv.slice(2));

(async () => {
  try {
    let loaded = await fromConfigFile({ cwd, path: args.config, name: 'styleguide' });
    const rootPath = dirname(loaded.path);
    if (cwd !== rootPath) {
      process.chdir(rootPath);
    }

    logger.info(`Using config file ${cyan(`./${relative(cwd, loaded.path)}`)}`);

    const command = args._[0] || 'start';
    const { config, compiler, adapter } = loaded;

    if (command === 'start') {

      const mode = assign({ mode: 'develop' }, config.develop || {}, args);
      const app = styleguide({ mode, compiler, adapter, ...config });

      app.on('error', onError);

      const server = await app();
      const port = server.address().port;

      logger.success(`Dev server started`);
      logger.log(stripIndent`
        ---
        Local:   ${cyan(`http://localhost:${port}`)}
        Network: ${cyan(`http://${ip.address()}:${port}`)}
        ---
      `);

      process.on('SIGINT', () => {
        server.close();
        logger.success('Dev server stopped');
        process.exit(0);
      });

    } else if (command === 'build') {

      const mode = assign({ mode: 'build' }, config.build || {}, args);
      const app = styleguide({ mode, compiler, adapter, ...config });
      app.on('error', onError);

      await app();

      logger.success(`Static site build complete.`);
      // logger.log(stripIndent`
      //   ---
      //   * ${cyan(`${pages.length} pages`)}
      //   * ${red(`${errors.length} errors`)}
      //   ---
      // `);

      process.exit(0);

    } else {
      throw new Error(`Command '${command}' not recognised`);
    }

  } catch(err) {
    logger.error(err);
    process.exit(1);
  }
})();

function onError(err) {
  if (err.status === 404) {
    logger.warn(`${err.message} ${dim(`[${err.path}]`)}`);
  } else {
    logger.error(err);
  }
}
